import{u as o}from"./vue.-sixQ7xP-BDxZGOZj.js";import{c as a,o as s,a as e,b as n}from"./index-CzOoN_He.js";const r={class:"markdown-body"},m="Tailwind CSS Rounded Inherit",S="2022-02-08T00:00:00.000Z",w="2022-02-08T00:00:00.000Z",_="Deeply nested border-radius inheritance in Tailwind CSS.",T="https://github.com/ShiftLimits/tailwindcss-rounded-inherit",f=["OPEN_SOURCE","SOFTWARE"],g=[],b={__name:"index",setup(d,{expose:i}){return i({frontmatter:{name:"Tailwind CSS Rounded Inherit",start_date:"2022-02-08T00:00:00.000Z",release_date:"2022-02-08T00:00:00.000Z",short_description:"Deeply nested border-radius inheritance in Tailwind CSS.",repo:"https://github.com/ShiftLimits/tailwindcss-rounded-inherit",categories:["OPEN_SOURCE","SOFTWARE"],meta:[]}}),o({meta:[]}),(c,t)=>(s(),a("div",r,t[0]||(t[0]=[e("h1",null,"Tailwind CSS Rounded Inherit",-1),e("p",null,[n("This is a plugin for Tailwind CSS that adds "),e("code",null,"rounded-inherit"),n(" utilities which will get its value from the nearest parent’s rounded value, no matter how deep the child element is. I wrote this plugin to solve a repetition problem I was having with certain component designs that required inner elements to have the same corner rounding as the parent. This plugin lets you specify what a corner’s rounding should be at the root of the component and children elements can adapt to that.")],-1)])))}};export{f as categories,b as default,g as meta,m as name,w as release_date,T as repo,_ as short_description,S as start_date};
