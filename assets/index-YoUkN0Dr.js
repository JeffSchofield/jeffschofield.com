import{u as r}from"./vue.-sixQ7xP-deYJhieZ.js";import{c as o,o as n,a as e}from"./index-NEwBzf1q.js";const a={class:"markdown-body"},u="3D Mockups",m="A tool for rendering pre-designed 3D scenes with custom assets provided by the user.",g=1,w="2023-05-01T00:00:00.000Z",f="2025-02-14T00:00:00.000Z",T=!0,y=["FRONTEND","BACKEND","WEBSITE","DEVOPS","SOFTWARE"],v=[],_={__name:"index",setup(i,{expose:s}){return s({frontmatter:{name:"3D Mockups",short_description:"A tool for rendering pre-designed 3D scenes with custom assets provided by the user.",carousel_aspect:1,start_date:"2023-05-01T00:00:00.000Z",end_date:"2025-02-14T00:00:00.000Z",highlight:!0,categories:["FRONTEND","BACKEND","WEBSITE","DEVOPS","SOFTWARE"],meta:[]}}),r({meta:[]}),(h,t)=>(n(),o("div",a,t[0]||(t[0]=[e("h1",null,"3D Mockups",-1),e("p",null,"In the early days of my time at Designstripe, I wrote a proof of concept that showed it was possible to render Three.JS scenes on the server-side and stream the video output to a client using FFMpeg to generate an HLS stream on the fly. This served as a seed for what eventually evolved into the full-blown server-side 3D renderer written in C++ that powered our 3D Mockups product.",-1),e("p",null,"I worked directly with our graphics programmer on the rendering engine, and I was a key contributor in developing the frontend and backend systems that allowed users to visualize their designs (uploaded or generated with our other products) in realistic contexts and queue jobs to render a final output, with real-time progress information streaming from the 3D renderer server. The system handled multiple device formats including laptops, phones, and posters, with precise dimension specifications for each format.",-1),e("p",null,"The renderer was implemented using modern OpenGL with EGL support, focusing on flexibility and performance. The core rendering system uses a data-oriented design approach, where the rendering pipeline was separated into distinct components. The unique aspect of this renderer is that itâ€™s materials system and shaders are designed specifically to match Three.JS as closely as we could manage. This allowed scene designers to work with a Three.JS-based workflow and have the server rendered results match what they would see in the browser.",-1)])))}};export{g as carousel_aspect,y as categories,_ as default,f as end_date,T as highlight,v as meta,u as name,m as short_description,w as start_date};
