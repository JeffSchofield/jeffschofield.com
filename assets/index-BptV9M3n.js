import{u as n}from"./vue.-sixQ7xP-CF5T0S3j.js";import{c as o,o as i,a as e}from"./index-RO_jvqb9.js";const s={class:"markdown-body"},m="Home Assistant Companion",u="A quick-access Android app for accessing my Home Assistant instance.",g="2024-11-15T00:00:00.000Z",f=!1,w=["APP","WEB_APPLICATION","FRONTEND","BACKEND","SOFTWARE"],A=.75,y=[],b={__name:"index",setup(r,{expose:a}){return a({frontmatter:{name:"Home Assistant Companion",short_description:"A quick-access Android app for accessing my Home Assistant instance.",start_date:"2024-11-15T00:00:00.000Z",highlight:!1,categories:["APP","WEB_APPLICATION","FRONTEND","BACKEND","SOFTWARE"],carousel_aspect:.75,meta:[]}}),n({meta:[]}),(d,t)=>(i(),o("div",s,t[0]||(t[0]=[e("h1",null,"Home Assistant Companion",-1),e("p",null,"I developed this Android app using Capacitor to serve as a playground to build my own quickly accessible Home Assistant controller. I had two main goals with this project: Replace the simplistic “Home Slide” app I had been using with something I could customize to my own liking, and attempt to make it feel as “native” as I could using my own frontend tooling.",-1),e("h2",null,"Technical Stack and Architecture",-1),e("p",null,"I built the application using Vite as the build system and Tailwind CSS, Vue, and TypeScript for the frontend, wrapped in Capacitor for mobile deployment. The architecture follows a service-based pattern with dependency injection for clean separation of concerns and maintainable code.",-1),e("p",null,"By using Vite, I am able to leverage the built-in development server for very quick remote development feedback. Thanks to Vite’s hot module reloading feature, I can make changes to the code on the host computer and see that immediately reflected on my actual device, enabling rapid iteration and experimentation.",-1),e("p",null,"The great part about this setup is that I can reuse the UI code and frontend services in other contexts as well, such as a traditional web application or even other platform deployments like on the desktop through Electron.",-1),e("h2",null,"Window Management",-1),e("p",null,"One of the most challenging aspects was implementing a unique window management system that allows the app to float above other applications while remaining discrete in the system. Inspired by how Google Assistant behaves, I used Android Studio to configure the application to have special window privileges through the manifest. I wrote code surrounding the Capacitor web view to create a fully transparent window that hides itself when it loses focus, while maintaining high performance and user interactivity when visible through hardware acceleration.",-1)])))}};export{A as carousel_aspect,w as categories,b as default,f as highlight,y as meta,m as name,u as short_description,g as start_date};
