import{u as a}from"./vue.-sixQ7xP-cRe6sb-E.js";import{c as i,o as n,n as s}from"./index-BlXnT7u0.js";const r={class:"markdown-body"},m="Smart Layouts Template Engine v2",g="A state-of-the-art graphic design template engine and procedural generator for creating brand-appropriate 2D graphical advertisements.",u="2024-05-01T00:00:00.000Z",b="2025-02-14T00:00:00.000Z",f=!0,y=["FRONTEND","SOFTWARE"],w=1.5,v=[],T={__name:"index",setup(o,{expose:t}){return t({frontmatter:{name:"Smart Layouts Template Engine v2",short_description:"A state-of-the-art graphic design template engine and procedural generator for creating brand-appropriate 2D graphical advertisements.",start_date:"2024-05-01T00:00:00.000Z",end_date:"2025-02-14T00:00:00.000Z",highlight:!0,categories:["FRONTEND","SOFTWARE"],carousel_aspect:1.5,meta:[]}}),a({meta:[]}),(p,e)=>(n(),i("div",r,e[0]||(e[0]=[s("<h1>Smart Layouts Template Engine v2</h1><p>At Designstripe I developed this novel procedural generation system that applies traditional constraint satisfaction and wave-function collapse principles to 2D graphic design. The system intelligently generates brand-appropriate advertisements while maintaining design coherence and brand guidelines by defining both hard and probabilistic generation rules over template wireframes.</p><h2>Core Algorithm</h2><p>The heart of the system lies in its procedural generation algorithm. It takes a user’s Brand DNA and a given wireframe as input. The wireframes are developed by designers as a collection of design elements which have metadata encoding their relationships to each other.</p><h3>Initial State Generation</h3><p>The system starts with a high-entropy state where all design elements have multiple possible configurations. Elements that make up a wireframe are weighted by importance (weight) to ensure critical brand elements are prioritized. The algorithm begins by processing elements in order of descending weight to maintain design hierarchy.</p><h3>Collapsing Element States</h3><p>For each element, there are multiple possible properties that could be applied such as colors, borders, shadows, shapes, etc. and multiple possible states these could be in, all of which is defined probabilistically. As the algorithm processes each element, it uses the probabilities to randomly select which properties are applied and in what states they end up in.</p><h3>Constraint Propagation</h3><p>The constraint system enforces both visual and brand rules by enforcing relationships between elements. As properties and states are collapsed, the probabilities assigned to properties and states of remaining elements are updated according to the generator’s constraint rules. For example, all colors might have equal probability when first selecting a background color, but when moving on to select text color that overlays the background, the probability of selecting a color that has insufficient contrast should be 0.</p><p>Key constraints include:</p><ul><li>WCAG-compliant contrast ratios between parent-child elements</li><li>Brand color palette adherence</li><li>Visual hierarchy maintenance</li><li>Layout balance and composition rules</li></ul><p>Sometimes, this means we will end up hitting a dead end. For example, we might end up at an element with all possible colors having 0 probability. When constraints fail this way, the system employs a smart backtracking mechanism while progressively relaxing constraints, allowing for exploration of the design space while maintaining design rules and brand integrity.</p><h3>Color Space Navigation</h3><p>The color management system uses a brand’s color palette as the foundation for all design elements. Brand palettes are unpredictable. Some brands have a carefully crafted palette that works for many scenarios. Others might have just one primary, or no primary at all.</p><p>This system is capable of generating extended palettes from brand colors through tints and shades, allowing for more creative variation for a design while remaining faithful to the brand. It also uses color harmony and contrast scoring on candidate color pairs to ensure higher probabilities are assigned to colors that are more appropriate given an element’s context and other design rules such as accessibility constraints.</p><h2>Impact and Technical Achievement</h2><p>This project was a significant improvement over the original approach to the first version of smart layouts, incorporating way more design elements and effects beyond text, blocks, and images. By applying constraint satisfaction and wave-function collapse principles to graphic design, I created a system that was capable of generating thousands of unique, brand-compliant designs while maintaining designer-defined visual hierarchy and composition rules, as well as ensuring accessibility standards.</p><p>This project showcases my expertise in both technical implementation and creative problem-solving, resulting in a powerful tool that bridges the gap between programmatic generation and professional design standards.</p>",19)])))}};export{w as carousel_aspect,y as categories,T as default,b as end_date,f as highlight,v as meta,m as name,g as short_description,u as start_date};
